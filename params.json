{"name":"HumbleLogging Framework","tagline":"HumbleLogging is a C++ logging framework","body":"# HumbleLogging Framework (C++)\r\n\r\nHumbleLogging is a lightweight C++ logging framework.\r\n\r\n\r\n# Features\r\n\r\n- Thread-Safe logging.\r\n- Custom logger name pattern.\r\n- Configurable LogLevel by config file.\r\n- Changable LogLevel and Appenders during runtime.\r\n- Multiple Appenders for each Logger.\r\n- Simple API to implement custom Appenders and Formatters.\r\n- Custom format for log messages (Formatter).\r\n\r\n\r\n## Built-in Appenders\r\n\r\n- **NullAppender**\r\n  Doesn't log anything. It's used for performance testing.\r\n- **ConsoleAppender**\r\n  Logs to STDOUT console and optionally to Visual Studio's Application Output Window.\r\n- **FileAppender**\r\n  Logs to a file. No further options.\r\n- **RollingFileAppender**\r\n  Logs to a file. Configurable roll-count and file size.\r\n\r\n\r\n## Built-in Formatters\r\n\r\n- **SimpleFormatter**\r\n  The default Formatter, which includes most important information in a predefined layout.\r\n- **PatternFormatter**\r\n  Provides placeholders to define a custom log messages format (e.g. `[%date] [%lls] [line=%line] [file=%filename] %m\\n`)\r\n\r\n\r\n# Dependencies\r\n\r\nExcept the STL (Standard Template Library), which should be on nearly every system,\r\nthe project doesn't require third-party libraries.\r\n\r\n## Linux\r\n\r\n- C++11 `std::mutex`\r\n- `pthread` for `./examples/mtperformance`\r\n\r\n\r\n# How To Build\r\n\r\nType on your console\r\n\r\n```\r\ncd $PROJECT_DIRECTORY\r\nmkdir build\r\ncd build\r\ncmake -DCMAKE_INSTALL_PREFIX:PATH=/tmp/humblelogging ..\r\n```\r\n  \r\nAfter you ran these commands you should have a `Makefile` or Visual Studio solution `*.sln` to build the library.\r\nThe `install` target will copy all public headers, libraries and cmake scripts into the `CMAKE_INSTALL_PREFIX` directory.\r\n\r\n\r\n## Build Options\r\n\r\n**cmake -DBuildShared=OFF** `default=ON`\r\n> Builds the library as static or shared library.\r\n\r\n  \r\n**cmake -DBuildExamples=OFF** `default=ON`\r\n>Builds all sub projects in the `./examples/` folder.\r\n\r\n\r\n## Build Compatibility\r\n\r\nThe project build has been tested in the following environments.\r\n\r\n- Windows 8.1 Update 1 Visual Studio 2008 (32 & 64 bit)\r\n- Windows 8.1 Update 1 Visual Studio 2010 (32 & 64 bit)\r\n- Windows 8.1 Update 1 Visual Studio 2012 (32 & 64 bit)\r\n- Ubuntu 14.04 GCC 4.8 (32 & 64 bit)\r\n\r\n\r\n# Examples\r\n\r\nSee the `./examples/basic/` and `./examples/configured` folders for an short introduction.\r\n\r\n\r\n## Example configuration file\r\n\r\nThe example configuration shows, that it is not required to rely on a specific pattern of Logger names.\r\nThe framework is based on simple strings and prefix searches. If it is required to specify a log-level recursive\r\nthe wildcard (*) have to be used.\r\n\r\n```\r\n# Sets the default log-level to OFF.\r\nlogger.level(*)=off\r\n\r\n# Specify a specific log-level for a few loggers.\r\nlogger.level(core*)=fatal\r\nlogger.level(core.network*)=error\r\nlogger.level(core.network.tcp*)=debug\r\n\r\n# Some more loggers with different names.\r\nlogger.level(Core*)=fatal\r\nlogger.level(CoreNetwork*)=error\r\nlogger.level(Audio*)=warn\r\nlogger.level(Video*)=warn\r\nlogger.level(VideoCapture*)=off\r\n```\r\n\r\n\r\n# Performance tests\r\n\r\nFeel free to contribute your tests (only release builds).\r\nThe following command can be used to test the performance.\r\n\r\n```\r\nmtperformance_example.exe 4 20000000 null\r\n```\r\n\r\nEnvironment | Events | Threads | Duration (ms) | Throughput (events/second)\r\n------------|--------|---------|---------------|---------------------------\r\nWindows 8.1 Update 1 32 bit / VC 2012 / Core i7 3770K @ 3.50 GHz | 80000000 | 4 | 12468 | 6416426.05\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}